//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Migrations = newMigrationsTable("public", "migrations", "")

type migrationsTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnInteger
	VersionID postgres.ColumnInteger
	IsApplied postgres.ColumnBool
	Tstamp    postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type MigrationsTable struct {
	migrationsTable

	EXCLUDED migrationsTable
}

// AS creates new MigrationsTable with assigned alias
func (a MigrationsTable) AS(alias string) *MigrationsTable {
	return newMigrationsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new MigrationsTable with assigned schema name
func (a MigrationsTable) FromSchema(schemaName string) *MigrationsTable {
	return newMigrationsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new MigrationsTable with assigned table prefix
func (a MigrationsTable) WithPrefix(prefix string) *MigrationsTable {
	return newMigrationsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new MigrationsTable with assigned table suffix
func (a MigrationsTable) WithSuffix(suffix string) *MigrationsTable {
	return newMigrationsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newMigrationsTable(schemaName, tableName, alias string) *MigrationsTable {
	return &MigrationsTable{
		migrationsTable: newMigrationsTableImpl(schemaName, tableName, alias),
		EXCLUDED:        newMigrationsTableImpl("", "excluded", ""),
	}
}

func newMigrationsTableImpl(schemaName, tableName, alias string) migrationsTable {
	var (
		IDColumn        = postgres.IntegerColumn("id")
		VersionIDColumn = postgres.IntegerColumn("version_id")
		IsAppliedColumn = postgres.BoolColumn("is_applied")
		TstampColumn    = postgres.TimestampColumn("tstamp")
		allColumns      = postgres.ColumnList{IDColumn, VersionIDColumn, IsAppliedColumn, TstampColumn}
		mutableColumns  = postgres.ColumnList{VersionIDColumn, IsAppliedColumn, TstampColumn}
	)

	return migrationsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		VersionID: VersionIDColumn,
		IsApplied: IsAppliedColumn,
		Tstamp:    TstampColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
