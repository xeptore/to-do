//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var TodoLists = newTodoListsTable("public", "todo_lists", "")

type todoListsTable struct {
	postgres.Table

	// Columns
	ID             postgres.ColumnString
	TheName        postgres.ColumnString
	TheDescription postgres.ColumnString
	CreatedByID    postgres.ColumnString
	CreatedAt      postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type TodoListsTable struct {
	todoListsTable

	EXCLUDED todoListsTable
}

// AS creates new TodoListsTable with assigned alias
func (a TodoListsTable) AS(alias string) *TodoListsTable {
	return newTodoListsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TodoListsTable with assigned schema name
func (a TodoListsTable) FromSchema(schemaName string) *TodoListsTable {
	return newTodoListsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TodoListsTable with assigned table prefix
func (a TodoListsTable) WithPrefix(prefix string) *TodoListsTable {
	return newTodoListsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TodoListsTable with assigned table suffix
func (a TodoListsTable) WithSuffix(suffix string) *TodoListsTable {
	return newTodoListsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTodoListsTable(schemaName, tableName, alias string) *TodoListsTable {
	return &TodoListsTable{
		todoListsTable: newTodoListsTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newTodoListsTableImpl("", "excluded", ""),
	}
}

func newTodoListsTableImpl(schemaName, tableName, alias string) todoListsTable {
	var (
		IDColumn             = postgres.StringColumn("id")
		TheNameColumn        = postgres.StringColumn("the_name")
		TheDescriptionColumn = postgres.StringColumn("the_description")
		CreatedByIDColumn    = postgres.StringColumn("created_by_id")
		CreatedAtColumn      = postgres.TimestampColumn("created_at")
		allColumns           = postgres.ColumnList{IDColumn, TheNameColumn, TheDescriptionColumn, CreatedByIDColumn, CreatedAtColumn}
		mutableColumns       = postgres.ColumnList{TheNameColumn, TheDescriptionColumn, CreatedByIDColumn, CreatedAtColumn}
	)

	return todoListsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:             IDColumn,
		TheName:        TheNameColumn,
		TheDescription: TheDescriptionColumn,
		CreatedByID:    CreatedByIDColumn,
		CreatedAt:      CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
